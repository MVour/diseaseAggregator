Project2
Michalis Vourtzoumis

		~~ README ~~

	Έχουν υλοποιηθεί όλες οι απαιτήσεις της εργασίας, όπως περιγράφονται στην εκφώνηση. Η εργασία αποτελείται από 10 αρχεία κεφαλίδας, 11 αρχεία κώδικα, το makefile, ένα αρχείο bash script και 3 txt αρχεία με τυχαία ονόματα χωρών και ασθενειών. Έχει υλοποιηθεί σε γλώσσα c.

	Κρίθηκε αναγκαίος ο διχωρισμός της εργασίας σε τρείς φακέλους. Ο πρώτος (code) περιέχει ολο το κώδικα της εργασίας και το makefile, ο δεύτερος έχει το bash script υπεύθυνο για τη δημιουργία των εγγραφών και ενα αρχείο python υπεύθυνο για τη δημιουργία των queryFiles  και αναγκαία για αυτό txt files.

	ΜΑΖΊ ΜΕ ΑΥΤΟΎΣ ΤΟΥΣ ΦΑΚΈΛΟΥΣ ΥΠΆΡΧΕΙ ΤΟ README ΚΑΙ ΈΝΑΣ ΕΠΙΠΛΈΟΝ ΦΆΚΕΛΟΣ ΜΕ ΔΕΊΓΜΑΤΑ ΕΓΓΡΑΦΏΝ.

	

	SCRIPT:
		Κατά την εκτέλεση του script, ο νέος φάκελοσ με τις εγγραφές δημιουργείται μέσα στον αρχικό φάκελο 			της εργασίας.
		
		Αντί για τυχαίες συμβολοσειρές στη δημιουργλια των ονομάτων, χρησιμοποιούνται τυχαία υπαρκτά 			ονόματα, με τη βοήθεια πινάκων μέσα στο script.

		Για κάθε 10 έγκυρες ENTER εγγραφές δημιουργείται 1 EXIT με πιθανότητα να είναι εγκυρη 70%.

		Το μέγιστο πλήθος χωρών που δύναται να δημιουργηθούν είναι 19. Το πρόγραμμα αύτη τη στιγμή 			δημιουργεί μόλις 15 αλλά αυτό αλλάζει εύκολα απο τον καθορισμό της μεταβλητής "target" που 			βρίσκεται στην 169 γραμμή. 

	
	master:
		Κατά την εκκίνηση, και μετά το δάβασμα των arguments, δημιουργεί τους workers και κατανέμει 			ομοιόμορφα τους καταλόγους των χωρών. Στη συνέχεια, διβάζει διαβάζει μέσω pipes το port  που εχει 			ανατεθεί σε κάθε worker έτσι ώστε στην περίπτωση που καποιος worker πεθάνει να γημιουργηθεί νέος με 			το ίδιο port ετσι λωστε να μην κολλήσουν τα ερωτήματα σ επερίπτωση αποτυχείας του worker να 			επικοινωνήσει με τον σερβερ λόγω γεμάτου μπαφερ.

		Τα pipes δημιουργούνται εδώ και ανοίγονται απο την πλευρά του parent ως nonblock.

		'Επειτα αναμένει μέχρι δεχθεί σήμα τερματισμού του προγράμματος, όπου και το κανει hnadle, 			απελευθερώνοτας όλη την δεσμευμένη μνήμη.

		Κατά την έξοδο η την άφιξη SIGINT/SIGQUIT απελευθερώνεται όλη η δεσμεθμένη μνήμη, δημιουργείται to 			log file και αποστέλεται SIGKILL στους workers.
		
	
	Woker:
		Διαβάζει και αποθηκεύει τις εγγραφές σε κατάλληλες δομές (έχουν χρησιμοποιηθεί όλες οι δομές της 			πρώτης εργασίας) και στη συνέχεια στέλνει τα στιστικά στον σερβερ και το πορτ του σταν μαστερ.

		Έπειτα, αναμένει την άφιξη κάποιου σήματος η εντολής απο τον μαστερ.

	SERVER:
		Δημιουργεί 2 σοκετς στις οποίες κανει λιστεν και αναμένει συνδεση απο τον κλιεντ η τους workers.

		Μόλις καποιος wokrer κανει connect με τον σερβερ, του αποστέλει τα στατιστικα και το πορτ του, τα 			οποία και αποθηκεύονται απο τον σερβερ σε κατάλληλες δομές.

		Για κάθε connect απο thread του client, ο σερβερ προωθεί το ερώτημα σε όλους τους workers και 			περιμένει απάντηση απο όλους. Μόλις την λάβει την προωθεί στο thread που εκανε την ερωτηση.

		Ο Server παραμένει ανοιχτός και τερματίζει ενα λαβει σήμα SIGINIT το οποίο και kanei handle, 			απελευθερώνοντας όλη την δεσμευμένη μνήμη.

	CLIENT:
		Αφού ο client διβάσει το αρχείο των queries, δημιουργει numThreads απο threads στα οποία και δίνει 			απο ενα ερώτημα.

		Ο συνγρονισμος των threads γινεται με χρηση ενος barrier.

	Τόσο στον Worker οσο και στον μαστερ και στον σερβερ και κλιεντ, γίνεται απαυθείας πραγματοποίηση της 		αναγκης κάθε σήματος μέσω της χρήσης τη poll() κατα το διάβασμα απο pipes (worker) και stdin (Aggregator), 		εκτός της περίπτωσης που ο worker ειναι απασχολημένος με την συλλογή αποτελεματον γοα τον Aggregator.


	Πρωτόκολλο επικοινωνίας:
		Πριν απο κάθε αποστολή μηνυματος, αποστέλεται πρώτα το μέγεθος του σε bytes.

		Κάθε μήνυμα τελειώνει με τον χαρακτήρα: '~'

		Για την αβίαστη και απλή αποστολή και λήψη των μηνυμάτων χρησιμοποιούνται δύο συναρτήσεις που 			επεξεργάζονται καάταλληλα τα μηνύματα (προσθέτουν τον ειδικό χαρακτήρα, στέλνουν πρώτο το μηνυμα 			μεγέθους κλπ.).

	PIPES:
		Τα pipes δημιουργούνται και καταστρέφονται στον Aggregator.

		Αποκλειστικά η read άκρη του Aggregator, προς κάθε worker, έχει ανοιχτεί nonblock.

		Για να επιτευχθεί η ανάγνωση από κάθε pipe αποφεύγοντας πιθανό μπλοκάρισμα του προγράμματος έχει 			δημιουργηθεί μια waiting list για τα pipes, η οποία χρησιμοποιηείται κυρίως απο τον aggregator.

	Δομές 1ης εργασίας:

		'Εχουν χρησιμοποιηθεί οι δομές: hashTable, bucet και record καθώς και η λίστα των ασθενών. Η δομή 			hashTable κρατά έναν δείκτη στον πίνακα κατακερματισμού, το μέγεθος του και τις μέγιστες εγγραφές 			των bucket του. Η δομή bucket περιέχει έναν δείκτη σε record, έναν μετρητή του πλήθους των εγγραφών 			της και έναν δείκτη σε μια επόμενη δομή bucket. Η κάθε δομή record αποτελείται από τη συμβολοσειρά 			του κλειδιού της, έναν δείκτη σε Red-Black Tree, έναν μετρητή για το πλήθος των εγγραφών του 			δέντρου και έναν δείκτη σε επόμενη δομή record.
